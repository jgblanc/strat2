# Snakefile to run main pipeline
CHR = []
for i in range(1, 23):
  CHR.append(str(i))
GWAS= ["e5", "e10", "e50", "e200", "WBS-R", "ALL-R"]
#GWAS = ["e5"]
DATASET = ["InUKBB"]
#CONTRASTS = ["eurasia-lat", "eurasia-long", "eur-lat", "eur-long", "sdi-eur", "eas-nfe", "eas-sas", "eas-afr", "eas-amr", "nfe-sas", "nfe-afr", "nfe-amr", "sas-afr", "sas-amr", "afr-amr"]
CONTRASTS = ["England-NorthernIreland", "England-RepublicOfIrelend", "England-Scotland", "England-Wales", "NorthernIreland-RepublicOfIrelend", "NorthernIreland-Scotland", "NorthernIreland-Wales", "RepublicOfIrelend-Scotland", "RepublicOfIrelend-Wales", "Scotland-Wales"]
#CONTRASTS = ["eurasia-lat"]

def get_rep_num(x):
  out = int(x)
  return out

wildcard_constraints:
    nsnp="L-pruneall"

rule all:
    input:
        expand("output/calculate_PCA/{dataset}/{gwas}/PCA_1.eigenvec" ,chr=CHR, gwas =GWAS, dataset=DATASET,contrasts=CONTRASTS)



##### Calculate H #####

# Get block info for PC SNPs

rule block_snps:
    input:
        snps="data/ukbb/ukbb_pc_snps.txt",
        blocks="data/LD_blocks/big_blocks.bed"
    output:
        "data/ukbb/ukbb_pc_snps_block.txt"
    shell:
        """
        Rscript code/blocks/add_block_info.R {input} {output}
        """


# Concat chromosomes and extract PCA SNPs

rule concat_chr:
    input:
        pgen=expand("/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3.pgen", chr=CHR),
        pvar=expand("/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3.pvar", chr=CHR),
        psam=expand("/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3.psam", chr=CHR),
        snps="data/ukbb/ukbb_pc_snps.txt"
    output:
        "/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_pcSNPs_ALL_v3.pgen",
        "/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_pcSNPs_ALL_v3.pvar",
        "/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_pcSNPs_ALL_v3.psam",
    params:
        prefix_out="/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_pcSNPs_ALL_v3",
        merge_prefix=expand("/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3", chr=CHR, newline="\n")
    threads: 16
    resources:
        mem_mb=60000,
        time="12:00:00"
    shell:
        """
        echo {params.merge_prefix} > tmp.txt
	tr ' ' '\n' < "tmp.txt" > "tmp_chr_list.txt"
        plink2 --pmerge-list tmp_chr_list.txt \
        --extract {input.snps} \
	      --threads 16 \
        --memory 60000 \
        --make-pgen \
        --freq \
        --out {params.prefix_out}
         """

# Calculate H

rule calc_H_Jacknife:
    input:
        r=expand("data/{{dataset}}/r/{{gwas}}/{{contrasts}}_chr{chr}.rvec", chr=CHR),
        IDs="data/ids/gwas_ids/{gwas}.txt",
        snps="data/ukbb/ukbb_pc_snps_block.txt"
    output:
        H = "output/calculate_H/{dataset}/{gwas}/H_BJ_{contrasts}.txt"
    params:
        plink_prefix="/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_pcSNPs_ALL_v3",
        out_prefix="output/calculate_H/{dataset}/{gwas}/BJ_{contrasts}",
        r_prefix="data/{dataset}/r/{gwas}/{contrasts}_chr"
    threads: 8
    resources:
        mem_mb=38000,
        time="02:00:00"
    shell:
        """
        Rscript code/calculate_H/calc_H.R {params.plink_prefix} {params.r_prefix} {params.out_prefix} {input.snps} {input.IDs} {output.H}
	      """

# Summarize H results

rule concat_H:
    input:
        expand("output/calculate_H/{{dataset}}/{gwas}/H_BJ_{contrasts}.txt", gwas=GWAS, contrasts=CONTRASTS)
    output:
        "plots/overlap_stats/H_{dataset}.txt"
    shell:
        """
        Rscript code/summarize/concat_OverlapStats.R {output} {input}
	      """

##### Calculate Error #####

rule calc_error:
    input:
        r=expand("data/{{dataset}}/r/{{gwas}}/{{contrasts}}_chr{chr}.rvec", chr=CHR),
        IDs="data/ids/gwas_ids/{gwas}.txt",
        snps="data/ukbb/ukbb_pc_snps_block.txt"
    output:
        error = "output/calculate_FGr/{dataset}/{gwas}/error_{contrasts}.txt"
    params:
        plink_prefix="/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_pcSNPs_ALL_v3",
        out_prefix="output/calculate_FGr/{dataset}/{gwas}/tmp_{contrasts}",
        r_prefix="data/{dataset}/r/{gwas}/{contrasts}_chr"
    threads: 8
    resources:
        mem_mb=38000,
        time="02:00:00"
    shell:
        """
        Rscript code/calculate_FGr/calc_error.R {params.plink_prefix} {params.r_prefix} {params.out_prefix} {input.snps} {input.IDs} {output.error}
	      """

rule concat_error:
    input:
        expand("output/calculate_FGr/{{dataset}}/{gwas}/error_{contrasts}.txt", gwas=GWAS, contrasts=CONTRASTS)
    output:
        "plots/error/error_{dataset}.txt"
    shell:
        """
        Rscript code/summarize/concat_Error.R {output} {input}
	      """

##### Calculate R^2 #######

rule calc_FGr_blocks:
    input:
        r=expand("data/{{dataset}}/r/{{gwas}}/{{contrasts}}_chr{chr}.rvec", chr=CHR),
        IDs="data/ids/gwas_ids/{gwas}.txt",
        snps="data/ukbb/ukbb_pc_snps_block.txt"
    output:
        FGr = "output/calculate_FGr/{dataset}/{gwas}/FGrMat_{contrasts}.txt",
        SNPs = "output/calculate_FGr/{dataset}/{gwas}/SNPNum_{contrasts}.txt"
    params:
        plink_prefix="/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_pcSNPs_ALL_v3",
        out_prefix="output/calculate_FGr/{dataset}/{gwas}/tmp_{contrasts}",
        r_prefix="data/{dataset}/r/{gwas}/{contrasts}_chr"
    threads: 8
    resources:
        mem_mb=38000,
        time="02:00:00"
    shell:
        """
        Rscript code/calculate_FGr/calc_FGr.R {params.plink_prefix} {params.r_prefix} {params.out_prefix} {input.snps} {input.IDs} {output.FGr} {output.SNPs}
	      """

rule calc_chr_PCA:
    input:
        IDs="data/ids/gwas_ids/{gwas}.txt"
    output:
        "output/calculate_PCA/{dataset}/{gwas}/PCA_1.eigenvec",
        "output/calculate_PCA/{dataset}/{gwas}/PCA_1.eigenval"
    params:
        plink_prefix="/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_pcSNPs_ALL_v3",
        out_prefix="output/calculate_PCA/{dataset}/{gwas}/PCA"
    threads: 8
    resources:
        mem_mb=38000,
        time="02:00:00"
    shell:
        """
        Rscript code/calculate_PCA/calc_PCA_chr.R {params.plink_prefix} {params.out_prefix} {input.IDs}
	      """

